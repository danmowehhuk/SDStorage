#ifndef _MockSdFat_h
#define _MockSdFat_h


#include <Arduino.h>
#include <StringStream.h>

static const char _MOCK_TESTROOT[] PROGMEM = "TESTROOT";

class MockSdFat {

  private:
    MockSdFat(MockSdFat &t) = delete;

  public:
    struct TestState {
      uint8_t existsCallCount = 0;
      bool onExistsReturn[8] = { false };
      bool onExistsAlways = false;
      bool onExistsAlwaysReturn = false;
      bool onIsDirectoryReturn = false;
      char* mkdirCaptor = nullptr;
      char* onLoadData = nullptr;
      char* loadFilenameCaptor = nullptr;
      char* removeCaptor = nullptr;
      bool onRemoveReturn = false;
      StringStream writeDataCaptor;
      String writeFilenameCaptor = String();
      StringStream writeTxnDataCaptor;
      String writeTxnFilenameCaptor = String();
      String renameOldCaptor = String();
      String renameNewCaptor = String();
      bool onRenameReturn = false;
      String onReadIdxData = String();
      String readIdxFilenameCaptor = String();
      StringStream writeIdxDataCaptor;
      String writeIdxFilenameCaptor = String();
      ~TestState() {
        // if (mkdirCaptor) free(mkdirCaptor);
        if (onLoadData) free(onLoadData);
        if (loadFilenameCaptor) free(loadFilenameCaptor);
        if (removeCaptor) free(removeCaptor);
        mkdirCaptor = nullptr;
        onLoadData = nullptr;
        loadFilenameCaptor = nullptr;
        removeCaptor = nullptr;
      };
    };

    MockSdFat() {};

    bool begin(uint8_t sdCsPin) { return true; };
    bool exists(const char* filename, void* testState) {
      TestState* ts = static_cast<TestState*>(testState);
      if (ts->onExistsAlways) {
        return ts->onExistsAlwaysReturn;
      } else {
        return ts->onExistsReturn[ts->existsCallCount++];
      }
    };
    bool isDirectory(const char* filename, void* testState) {
      TestState* ts = static_cast<TestState*>(testState);
      return ts->onIsDirectoryReturn;
    };
    bool mkdir(const char* filename, void* testState) {
      TestState* ts = static_cast<TestState*>(testState);
      ts->mkdirCaptor = filename;
      return true;
    };
    bool remove(const char* filename, void* testState) {
      TestState* ts = static_cast<TestState*>(testState);
      ts->removeCaptor = filename;
      return ts->onRemoveReturn;
    };

    bool rename(const String& oldFilename, const String& newFilename, void* testState) {
      TestState* ts = static_cast<TestState*>(testState);
      ts->renameOldCaptor = oldFilename;
      ts->renameNewCaptor = newFilename;
      return ts->onRenameReturn;
    };

    Stream* loadFileStream(const char* filename, void* testState) {
      TestState* ts = static_cast<TestState*>(testState);
      ts->loadFilenameCaptor = filename;
      StringStream* ss = new StringStream(ts->onLoadData);
      return ss;
    };

    Stream* writeFileStream(const String& filename, void* testState) {
      TestState* ts = static_cast<TestState*>(testState);
      return &(ts->writeDataCaptor);
    };

    Stream* writeTxnFileStream(const String& filename, void* testState) {
      TestState* ts = static_cast<TestState*>(testState);
      ts->writeTxnFilenameCaptor = filename;
      return &(ts->writeTxnDataCaptor);
    };

    Stream* readIndexFileStream(const String& filename, void* testState) {
      TestState* ts = static_cast<TestState*>(testState);
      ts->readIdxFilenameCaptor = filename;
      StringStream* ss = new StringStream(ts->onReadIdxData);
      return ss;
    };

    Stream* writeIndexFileStream(const String& filename, void* testState) {
      TestState* ts = static_cast<TestState*>(testState);
      ts->writeIdxFilenameCaptor = filename;
      return &(ts->writeIdxDataCaptor);
    };

};


#endif